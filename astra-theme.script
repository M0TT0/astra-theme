# This is an example plymouth plugin script
Window.SetBackgroundTopColor(0.16, 0.15, 0.17); 
Window.SetBackgroundBottomColor(0.16, 0.15, 0.17);

logo.original_image = Image("astra-white-logo.png");
logo.scale_factor_x = Window.GetWidth() * 0.15;
if (logo.scale_factor_x < 300) {
  logo.scale_factor_x = 300;
}
logo.scale_factor_y = logo.scale_factor_x / logo.original_image.GetWidth();
logo.image = logo.original_image.Scale(logo.scale_factor_x, logo.original_image.GetHeight() * logo.scale_factor_y);
logo.sprite = Sprite(logo.image);
logo.opacity_angle = 0;

fun refresh_callback ()
{
    if (status == "normal")
    {
        logo.opacity_angle += ((2 * 3.14) / 50) * 0.5;  # 0.5 HZ
        min_opacity = 0.3;
        opacity = (Math.Cos(logo.opacity_angle) + 1) / 2;
        opacity *= 1 - min_opacity;
        opacity += min_opacity;
        logo.sprite.SetX (Window.GetX() + Window.GetWidth()  / 2 - logo.image.GetWidth()  / 2);
        if (Plymouth.GetMode() == "shutdown") {
          logo.sprite.SetY (Window.GetY() + Window.GetHeight() / 2 - logo.image.GetHeight() / 2);
        } else {
          logo.sprite.SetY (Window.GetY() + Window.GetHeight() / 2.5);
        }
        logo.sprite.SetOpacity (opacity);
      }
    else
      {
        logo.sprite.SetX (0);
        logo.sprite.SetY (0);
        logo.sprite.SetOpacity (1);
      }
  }

Plymouth.SetRefreshFunction (refresh_callback);

#----------------------------------------- Dialogue --------------------------------

status = "normal";

fun dialog_setup()
  {
    local.box;
    local.lock;
    local.entry;
    
    box.image = Image("box.png");
    lock.image = Image("lock.png");
    entry.image = Image("entry.png");
    
    box.sprite = Sprite(box.image);
    box.x = Window.GetX() + Window.GetWidth()  / 2 - box.image.GetWidth ()/2;
    box.y = Window.GetY() + Window.GetHeight() / 2 - box.image.GetHeight()/2;
    box.z = 10000;
    box.sprite.SetPosition(box.x, box.y, box.z);
    
    lock.sprite = Sprite(lock.image);
    lock.x = box.x + box.image.GetWidth()/2 - (lock.image.GetWidth() + entry.image.GetWidth()) / 2;
    lock.y = box.y + box.image.GetHeight()/2 - lock.image.GetHeight()/2;
    lock.z = box.z + 1;
    lock.sprite.SetPosition(lock.x, lock.y, lock.z);
    
    entry.sprite = Sprite(entry.image);
    entry.x = lock.x + lock.image.GetWidth();
    entry.y = box.y + box.image.GetHeight()/2 - entry.image.GetHeight()/2;
    entry.z = box.z + 1;
    entry.sprite.SetPosition(entry.x, entry.y, entry.z);
    
    global.dialog.box = box;
    global.dialog.lock = lock;
    global.dialog.entry = entry;
    global.dialog.bullet_image = Image("bullet.png");
    dialog_opacity (1);
  }
    
fun dialog_opacity(opacity)
  {
    dialog.box.sprite.SetOpacity (opacity);
    dialog.lock.sprite.SetOpacity (opacity);
    dialog.entry.sprite.SetOpacity (opacity);
    for (index = 0; dialog.bullet[index]; index++)
      {
        dialog.bullet[index].sprite.SetOpacity(opacity);
      }
  }

fun display_normal_callback ()
  {
    global.status = "normal";
    if (global.dialog)
      dialog_opacity (0);
  }

fun display_password_callback (prompt, bullets)
  {
    global.status = "password";
    if (!global.dialog)
	dialog_setup();
    else
	dialog_opacity(1);
    for (index = 0; dialog.bullet[index] || index < bullets; index++)
      {
        if (!dialog.bullet[index])
          {
            dialog.bullet[index].sprite = Sprite(dialog.bullet_image);
            dialog.bullet[index].x = dialog.entry.x + index * dialog.bullet_image.GetWidth();
            dialog.bullet[index].y = dialog.entry.y + dialog.entry.image.GetHeight() / 2 - dialog.bullet_image.GetHeight() / 2;
            dialog.bullet[index].z = dialog.entry.z + 1;
            dialog.bullet[index].sprite.SetPosition(dialog.bullet[index].x, dialog.bullet[index].y, dialog.bullet[index].z);
          }
        if (index < bullets)
          dialog.bullet[index].sprite.SetOpacity(1);
        else
          dialog.bullet[index].sprite.SetOpacity(0);
      }
  }

Plymouth.SetDisplayNormalFunction(display_normal_callback);
Plymouth.SetDisplayPasswordFunction(display_password_callback);

#----------------------------------------- Progress Bar --------------------------------

if (Plymouth.GetMode() != "shutdown") {
  progress_box.image = Image("progress_box_lighter.png");
  progress_box.sprite = Sprite(progress_box.image);

  progress_box.x = Window.GetX() + Window.GetWidth() / 2 - progress_box.image.GetWidth() / 2;
  progress_box.y = Window.GetY() + Window.GetHeight() / 2 * 1.15 - progress_box.image.GetHeight() / 2;
  progress_box.sprite.SetPosition(progress_box.x, progress_box.y, 0);
}

if (Plymouth.GetMode() == "boot") {

  progress_bar.original_image = Image("progress_bar_blue.png");
  progress_bar.sprite = Sprite();

  progress_bar.x = Window.GetX() + Window.GetWidth()  / 2 - progress_bar.original_image.GetWidth() / 2;
  progress_bar.y = Window.GetY() + Window.GetHeight() / 2 * 1.15  - progress_box.image.GetHeight() / 2 + (progress_box.image.GetHeight() - progress_bar.original_image.GetHeight()) / 2;
  progress_bar.sprite.SetPosition(progress_bar.x, progress_bar.y, 1);


  fun progress_callback (duration, progress)
  {
    if (progress_bar.image.GetWidth () != Math.Int (progress_bar.original_image.GetWidth () * progress))
      {
        progress_bar.image = progress_bar.original_image.Scale(progress_bar.original_image.GetWidth(progress_bar.original_image) * progress, progress_bar.original_image.GetHeight());
        progress_bar.sprite.SetImage (progress_bar.image);
      }
  }

  Plymouth.SetBootProgressFunction(progress_callback);
}

#----------------------------------------- Quit --------------------------------

fun quit_callback ()
{
  logo.sprite.SetOpacity (1);
}

Plymouth.SetQuitFunction(quit_callback);

#----------------------------------------- Message --------------------------------

message_sprite = Sprite();
message_sprite.SetPosition(10, 10, 10000);

fun display_message_callback (text)
{
  my_image = Image.Text(text, 1, 1, 1);
  message_sprite.SetImage(my_image);
}

fun hide_message_callback (text)
{
  message_sprite = Sprite();
  message_sprite.SetPosition(10, 10, 10000);
}

Plymouth.SetDisplayMessageFunction (display_message_callback);
Plymouth.SetHideMessageFunction (hide_message_callback);

fun Split(str, delim, max)
    {
    local.parts = [];
    local.count = 0;
    local.start = 0;
    for (local.i = 0; str.CharAt(i); i++)
        {
        if (max != NULL && count == max)
            {
            continue;
            }
        if (str.CharAt(i) == delim)
            {
            parts[count++] = str.SubString(start, i);
            start = i + 1;
            }
        }
    parts[count++] = str.SubString(start, i);

    return parts | count;  # Return value inherits from both hash and number
    }
# Join multiple strings with a delimiter.
#
fun Join(parts, delim)
    {
    local.text = "";
    for (local.i = 0; parts[i]; i++)
        {
        if (text)
            {
            text = text + delim;
            }
        text = text + parts[i];
        }
    return text;
    }

# Return the offset within str where substr appears, or -1 if it is not found.
#
fun Find(str, substr)
    {
    for (local.i = 0; str.CharAt(i); i++)
        {
        local.n = 0;
        while (str.CharAt(i + n) && str.CharAt(i + n) == substr.CharAt(n))
            {
            n++;
            }
        if (!substr.CharAt(n))
            {
            return i;
            }
        }
    return -1;
    }

# Return an integer from a string, or NULL on failure
#
fun Int(str)
    {
    local.val = 0;
    local.scale = 1;

    for (local.i = 0;
        (local.char = str.CharAt(i)) != ""; i++)
        {
        if (i == 0 && char == "-")
            {
            scale = -1;
            continue;
            }
        local.digit = Find("0123456789", str.CharAt(i));
        if (digit == -1)
            {
            return NULL;
            }
        val = val * 10 + digit;
        }
    return val * scale;
    }

if (Plymouth.GetMode() == "updates") {

  uprogress_bar.noscaled_image = Image("progress_bar_blue.png");
  uprogress_bar.original_image = uprogress_bar.noscaled_image;
  uprogress_bar.sprite = Sprite();

  uprogress_bar.x = Window.GetX() + Window.GetWidth()  / 2 - uprogress_bar.original_image.GetWidth() / 2;
  uprogress_bar.y = Window.GetY() + Window.GetHeight() / 2 * 1.15  - progress_box.image.GetHeight() / 2 + (progress_box.image.GetHeight() - uprogress_bar.original_image.GetHeight()) / 2;
  uprogress_bar.sprite.SetPosition(uprogress_bar.x, uprogress_bar.y, 2);

  status_sprite = Sprite();
  status_sprite.SetPosition(10, 10, 10000);

  fun update_status_callback (text)
  {

    parts = Split(text, "|");

    if (parts[1])
    {
      local.progress = Int(parts[1]) / 100;

      status_text = parts[0];

      if (uprogress_bar.image.GetWidth () != Math.Int (uprogress_bar.original_image.GetWidth () * progress))
      {
        uprogress_bar.image = uprogress_bar.original_image.Scale(uprogress_bar.original_image.GetWidth(uprogress_bar.original_image) * progress, uprogress_bar.original_image.GetHeight());
        uprogress_bar.sprite.SetImage (uprogress_bar.image);
      }
    } else {
      status_text = text;
    }

    status_image = Image.Text(status_text, 1, 1, 1);
    status_sprite.SetImage(status_image);
    status_sprite.SetX(Window.GetX() + Window.GetWidth() / 2 - status_image.GetWidth() / 2);
    status_sprite.SetY(Window.GetY() + Window.GetHeight() / 2 * 1.15 - status_image.GetHeight() / 2 + 30);
  }

  Plymouth.SetUpdateStatusFunction(update_status_callback);
}

